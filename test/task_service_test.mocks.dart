// Mocks generated by Mockito 5.4.4 from annotations
// in task_manager/test/task_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:flutter/cupertino.dart' as _i6;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:task_manager/models/task_model.dart' as _i3;
import 'package:task_manager/services/task_services.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeClient_0 extends _i1.SmartFake implements _i2.Client {
  _FakeClient_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTask_1 extends _i1.SmartFake implements _i3.Task {
  _FakeTask_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskService].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskService extends _i1.Mock implements _i4.TaskService {
  MockTaskService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Client get client => (super.noSuchMethod(
        Invocation.getter(#client),
        returnValue: _FakeClient_0(
          this,
          Invocation.getter(#client),
        ),
      ) as _i2.Client);

  @override
  set client(_i2.Client? _client) => super.noSuchMethod(
        Invocation.setter(
          #client,
          _client,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<List<_i3.Task>> fetchTasks(
    int? limit,
    int? skip,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchTasks,
          [
            limit,
            skip,
          ],
        ),
        returnValue: _i5.Future<List<_i3.Task>>.value(<_i3.Task>[]),
      ) as _i5.Future<List<_i3.Task>>);

  @override
  _i5.Future<_i3.Task> addTask(
    String? todo,
    bool? completed,
    int? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTask,
          [
            todo,
            completed,
            userId,
          ],
        ),
        returnValue: _i5.Future<_i3.Task>.value(_FakeTask_1(
          this,
          Invocation.method(
            #addTask,
            [
              todo,
              completed,
              userId,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Task>);

  @override
  _i5.Future<void> saveTaskList(List<_i3.Task>? tasks) => (super.noSuchMethod(
        Invocation.method(
          #saveTaskList,
          [tasks],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i3.Task>> loadTaskList() => (super.noSuchMethod(
        Invocation.method(
          #loadTaskList,
          [],
        ),
        returnValue: _i5.Future<List<_i3.Task>>.value(<_i3.Task>[]),
      ) as _i5.Future<List<_i3.Task>>);

  @override
  _i5.Future<_i3.Task> updateTask(
    int? id,
    bool? completed,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [
            id,
            completed,
          ],
        ),
        returnValue: _i5.Future<_i3.Task>.value(_FakeTask_1(
          this,
          Invocation.method(
            #updateTask,
            [
              id,
              completed,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Task>);

  @override
  _i5.Future<void> deleteTask(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [id],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void showProgressDialog(_i6.BuildContext? context) => super.noSuchMethod(
        Invocation.method(
          #showProgressDialog,
          [context],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dismissProgressDialog() => super.noSuchMethod(
        Invocation.method(
          #dismissProgressDialog,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
